# Generated by Django 2.0.5 on 2021-05-03 10:05

from django.db import migrations, models, transaction
from django.db.models import Q
from django.conf import settings
from django.utils import timezone
from datetime import timedelta
import re
import logging
logger = logging.getLogger(__name__)

def is_same_strength_rx(prescriptions):
    is_same = True
    tretinoin_strength_1 = get_tretinoin_strength(prescriptions[0].prescription)
    for prescription in prescriptions[1:]:
        tretinoin_strength = get_tretinoin_strength(prescription.prescription)
        # logger.debug(f'[is_same_strength_rx] tretinoin_strength_1: {tretinoin_strength_1}. '
        #              f'tretinoin_strength: {tretinoin_strength}.')
        if tretinoin_strength_1 != tretinoin_strength:
            is_same = False
            return is_same
    return is_same

def get_tretinoin_strength(prescription):
    tretinoin_strength = None
    exact_name = prescription.exact_name
    # Tretinoin 0.015%/Hyaluronic Acid 0.5% in Pracasil
    tretinoin_strength_search = re.search('Tretinoin (.*)%/', exact_name)
    if tretinoin_strength_search:
        tretinoin_strength = tretinoin_strength_search.group(1)
    return tretinoin_strength

# update total_amount
def update_rx_prescribed_message_sent(apps, schema_editor):
    Visit = apps.get_model('emr', 'Visit')
    ChatMessage = apps.get_model('emr', 'ChatMessage')
    for visit in Visit.objects.filter(Q(status="Provider Rx Submitted") | Q(status="Provider Signed")):
        formatted_visit_created_datetime = visit.created_datetime.strftime('%Y-%m-%d')
        patient = visit.patient
        prescriptions = visit.prescriptions.all()
        prescriptions_names = prescriptions.values_list('prescription__display_name', flat=True)
        earliest_prescription = prescriptions.earliest('prescribed_datetime') if prescriptions else None
        latest_prescription = prescriptions.latest('prescribed_datetime') if prescriptions else None
        earliest_prescription_datetime = earliest_prescription.prescribed_datetime if earliest_prescription else None
        latest_prescription_datetime = latest_prescription.prescribed_datetime if latest_prescription else None
        formatted_earliest_prescription_datetime = earliest_prescription_datetime.strftime(
            '%Y-%m-%d') if earliest_prescription else None
        formatted_latest_prescription_datetime = latest_prescription_datetime.strftime(
            '%Y-%m-%d') if latest_prescription else None

        # first visit date: 2018-03-05 01:44:38.000000 +00:00

        # earliest: 2020-06-09 08:00:54.616798+00
        same_rx_message = ChatMessage.objects.filter(Q(receiver=patient) &
                                                     Q(body__icontains="I've put you on a strength of") &
                                                     Q(created_datetime__date__lte=visit.created_datetime + timedelta(days=60)) &
                                                     Q(created_datetime__date__gte=visit.created_datetime))

        # earliest: 2018-05-16 17:58:55+00, latest: 2020-06-05 08:02:12.93848+00
        legacy_rx_message = ChatMessage.objects.filter(Q(receiver=patient) &
                                                       Q(body__icontains="I've finished reviewing your medical and skin profile info") &
                                                       Q(created_datetime__date__lte=visit.created_datetime + timedelta(days=60)) &
                                                       Q(created_datetime__date__gte=visit.created_datetime))

        # earliest: 2020-06-06 08:00:07.036682+00
        increase_rx_message = ChatMessage.objects.filter(Q(receiver=patient) &
                                                         Q(body__icontains="I've started you off on a lower strength of") &
                                                         Q(created_datetime__date__lte=visit.created_datetime + timedelta(days=60)) &
                                                         Q(created_datetime__date__gte=visit.created_datetime))

        # rx_message = ChatMessage.objects.filter(Q(receiver=patient) &
        #                                         (Q(body__icontains="I've started you off on a lower strength of") |
        #                                          Q(body__icontains="I've finished reviewing your medical and skin profile info") |
        #                                          Q(body__icontains="I've started you off on a lower strength of")) &
        #                                         Q(created_datetime__date__lte=visit.created_datetime + timedelta(days=60)) &
        #                                         Q(created_datetime__date__gte=visit.created_datetime))

        # check if visit has an rx message
        if same_rx_message or legacy_rx_message or increase_rx_message:
            if prescriptions:
                is_same_strength = is_same_strength_rx(prescriptions)
                if not legacy_rx_message:
                    if is_same_strength and increase_rx_message:
                        logger.error(f'[update_rx_prescribed_message_sent] '
                                     f'!!!! {formatted_latest_prescription_datetime}, {formatted_earliest_prescription_datetime}, '
                                     f'Invalid message sent - same rx but increase rx message, '
                                     f'Increase rx message: {increase_rx_message}, '
                                     f'Patient: {patient.id}, '
                                     f'Visit: {visit.id}, '
                                     f'Visit created: {formatted_visit_created_datetime}, '
                                     f'Prescriptions names: {prescriptions_names}, '
                                     f'{{\"emails\": [\"{patient.email}\"], \"disable_notification\": true, \"created_datetime\": \"{latest_prescription_datetime}\", \"visit_id\": {visit.id}}}')
                    if not is_same_strength and same_rx_message:
                        logger.error(f'[update_rx_prescribed_message_sent] '
                                     f'!!!! {formatted_latest_prescription_datetime}, {formatted_earliest_prescription_datetime}, '
                                     f'Invalid message sent - different rx but same rx message, '
                                     f'Same rx message: {same_rx_message}, '
                                     f'Patient: {patient.id}, '
                                     f'Visit: {visit.id}, '
                                     f'Visit created: {formatted_visit_created_datetime}, '
                                     f'Prescriptions names: {prescriptions_names}, '
                                     f'{{\"emails\": [\"{patient.email}\"], \"disable_notification\": true, \"created_datetime\": \"{latest_prescription_datetime}\", \"visit_id\": {visit.id}}}')
                logger.debug(
                    f'[update_rx_prescribed_message_sent] Rx message sent to patient: {patient.id}. Visit: {visit.id}. '
                    f'same_rx_message: {same_rx_message}. legacy_rx_message: {legacy_rx_message}. '
                    f'increase_rx_message: {increase_rx_message}. prescriptions: {prescriptions_names}.')
                visit.rx_prescribed_message_sent = True
                visit.save()
            else:
                logger.error(
                    f'[update_rx_prescribed_message_sent] '
                    f'!!!! No prescriptions created, '
                    f'Patient: {patient.id}, '
                    f'Visit: {visit.id}, '
                    f'Visit created: {formatted_visit_created_datetime}')
        else:
            logger.error(
                f'[update_rx_prescribed_message_sent] '
                f'!!!! {formatted_latest_prescription_datetime}, {formatted_earliest_prescription_datetime}, '
                f'No Rx message sent, '
                f'Patient: {patient.id}, '
                f'Visit: {visit.id}, '
                f'Visit created: {formatted_visit_created_datetime}, '
                f'{{\"emails\": [\"{patient.email}\"], \"disable_notification\": true, \"created_datetime\": \"{latest_prescription_datetime}\", \"visit_id\": {visit.id}}}')

class Migration(migrations.Migration):

    dependencies = [
        ('emr', '0056_remove_patientprescription_provider'),
    ]

    operations = [
        migrations.AddField(
            model_name='visit',
            name='rx_prescribed_message_sent',
            field=models.BooleanField(default=False),
        ),
       migrations.RunPython(update_rx_prescribed_message_sent, reverse_code=migrations.RunPython.noop),
    ]
