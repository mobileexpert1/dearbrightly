# Generated by Django 2.0.5 on 2019-03-07 01:45

from django.db.models import Q
from django.db import migrations
from django.conf import settings
import logging
logger = logging.getLogger(__name__)

def is_subscription(order):
    subscription_products = order.order_products.filter(frequency__gt=0)
    return len(subscription_products) > 0

def create_order_product_subscriptions(apps, schema_editor):
    OrderProductSubscription = apps.get_model('subscriptions', 'OrderProductSubscription')
    OrderItemSubscription = apps.get_model('subscriptions', 'OrderItemSubscription')
    Order = apps.get_model('orders', 'Order')

    for order in Order.objects.all().order_by('-created_datetime'):
        is_order_subscription = is_subscription(order)
        if is_order_subscription:
            logger.debug(f'[create_order_product_subscriptions] Created Order Product Subscription. '
                         f'Order: {order.id}.')
            for order_product in order.order_products.all():
                # Try to find an existing subscription that belongs to the customer first
                order_product_subscription = OrderProductSubscription.objects.filter(
                    Q(product=order_product.product) & Q(customer=order.customer)).first()
                if not order_product_subscription:
                    order_product_subscription = OrderProductSubscription.objects.create(
                        created_datetime=order.purchased_datetime,
                        current_period_start_datetime=order.purchased_datetime,
                        customer=order.customer,
                        frequency=3,
                        product=order_product.product)
                order_product.order_product_subscription = order_product_subscription
                order_product.save()
                for order_item in order_product.order_items.all():
                    # Try to find an existing subscription that belongs to the customer first
                    order_item_subscription = OrderItemSubscription.objects.filter(
                        Q(product=order_product.product) & Q(customer=order.customer)).first()
                    if not order_item_subscription:
                        order_item_subscription = OrderItemSubscription.objects.create(
                            created_datetime=order.purchased_datetime,
                            customer=order.customer,
                            order_product_subscription=order_product_subscription,
                            payment_processor_subscription_id=order_item.payment_processor_subscription_id,
                            product=order_item.product)
                    order_item.order_item_subscription = order_item_subscription
                    order_item.save()
                    logger.debug(f'[create_order_product_subscriptions] Created Order Product Subscriptions. '
                                 f'Order: {order.id}. '
                                 f'Order Product: {order_product.id}. '
                                 f'Order Item: {order_item.id}. '
                                 f'Order Product Subscription: {order_product_subscription.id}. '
                                 f'Order Item Subscription: {order_item_subscription.id}.')
        else:
            logger.info(f'[create_order_product_subscriptions] Order {order.id} is not a subscription')

class Migration(migrations.Migration):
    logger.setLevel(logging.INFO)
    settings.LOGGING['loggers']['django'] = {'level': 'INFO', 'handlers': ['console']}

    dependencies = [
        ('subscriptions', '0002_auto_20190304_2313'),
        ('orders', '0062_create_orderitems'),
    ]

    operations = [
        #migrations.RunPython(create_order_product_subscriptions, reverse_code=migrations.RunPython.noop),
    ]
