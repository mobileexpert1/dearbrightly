# Generated by Django 2.0.5 on 2021-11-10 05:26

from django.db import migrations
from uuid import uuid4
import logging
logger = logging.getLogger(__name__)


def get_products_in_set(apps, product):
    SetProduct = apps.get_model('products', 'SetProduct')
    products_in_set = []
    if product.is_set:
        product_sets = SetProduct.objects.filter(set_product=product)
        for product_set in product_sets:
            products_in_set.append(product_set.product_in_set)
    return products_in_set

def get_all_products(apps, product):
    products_in_set = get_products_in_set(apps, product)
    if len(products_in_set) == 0:
        return [product]
    return products_in_set

def copy_subscription_old_to_new(apps, schema_editor):
    OrderProductSubscription = apps.get_model('subscriptions', 'OrderProductSubscription')
    Subscription = apps.get_model('subscriptions', 'Subscription')
    Edit = apps.get_model('subscriptions', 'Edit')
    Product = apps.get_model('products', 'Product')

    all_old_subscriptions = OrderProductSubscription.objects.all().order_by('pk')
    for old_subscription in all_old_subscriptions:
        old_subscription_params = dict(old_subscription.__dict__)
        del old_subscription_params['_state']
        del old_subscription_params['id']

        product = Product.objects.get(id=old_subscription_params['product_id'])
        for item in get_all_products(apps, product):
            old_subscription_params['uuid'] = uuid4()
            old_subscription_params['product_id'] = item.pk

            new_subscription = Subscription.objects.create(**old_subscription_params)
            new_subscription.created_datetime = old_subscription_params['created_datetime']
            new_subscription.save()

            logger.info(f'[copy_subscription_old_to_new] old_subscription: {old_subscription}. '
                        f'old_subscription_params: {old_subscription_params}. '
                        f'new_subscription: {new_subscription}. '
                        f'item: {item}.')

            # Set the new Rx subscription to the Edit reference for simplicity
            if item.product_type == 'Rx':
                edit_with_old_subscriptions = Edit.objects.filter(subscription_old=old_subscription)
                for edit in edit_with_old_subscriptions:
                    edit.subscription = new_subscription
                    edit.save(update_fields=['subscription'])
                    logger.info(f'[copy_subscription_old_to_new] '
                                f'edit: {edit.id}. '
                                f'new_subscription: {new_subscription.id}.')



class Migration(migrations.Migration):

    dependencies = [
        ('subscriptions', '0026_edit_subscription_new'),
    ]

    operations = [
        migrations.RenameField(
            model_name='edit',
            old_name='subscription_new',
            new_name='subscription',
        ),
        migrations.RunPython(copy_subscription_old_to_new, reverse_code=migrations.RunPython.noop),
    ]
