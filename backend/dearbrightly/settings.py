"""
Django settings for dearbrightly project.

Generated by 'django-admin startproject' using Django 2.0.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""
import datetime
import os

import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration


sentry_sdk.init(
    dsn=os.environ.get("SENTRY_DSN"),
    integrations=[DjangoIntegration()],
    auto_session_tracking=False,
    traces_sample_rate=0.01,
    sample_rate=0.25,
    release="1.0.0",
    environment=os.environ.get("SENTRY_ENVIRONMENT"),
)

CSP_REPORT_URI = [os.environ.get("SENTRY_SECURITY_ENDPOINT")]

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Make the trailing slash not required.
APPEND_SLASH = False

# Set the default User model to the dearbrightly user
AUTH_USER_MODEL = 'users.User'

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/
SECRET_KEY = 'w9l*76fgf!9z358cb_-ax9+25r=(n&h3(tjzuh!y33x%9lpgan'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
# DEBUG = True if os.environ.get('DEBUG') == 'True' else False
PRODUCTION = True #if os.environ.get('BACKEND_HOST') == 'www.dearbrightly.com' else False
TEST_MODE = False
# CORS
CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_WHITELIST = (
    'localhost:8000',
    'http://localhost:8000',
    '127.0.0.1:8000',
    '127.0.0.1:8005',
    '10.0.0.98:8000',
    '44.204.30.93'
)
CORS_ORIGIN_REGEX_WHITELIST = (
    'localhost:8000',
    'http://localhost:8000',
    '127.0.0.1:8000',
    '10.0.0.98:8000',
)

DEARBRIGHTLY_API_KEY = os.environ.get('DEARBRIGHTLY_API_KEY')

# Curexa
CUREXA_API_KEY = os.environ.get('CUREXA_API_KEY')
CUREXA_SECRET_KEY = os.environ.get('CUREXA_SECRET_KEY')
CUREXA_URI = os.environ.get('CUREXA_URI')
# CUREXA_ORDERS_URI = os.path.join(CUREXA_URI, 'orders')
# CUREXA_CANCEL_ORDER_URI = os.path.join(CUREXA_URI, 'cancel_order')
DEARBRIGHTLY_CUREXA_API_KEY = os.environ.get('DEARBRIGHTLY_CUREXA_API_KEY')

# DoseSpot
DOSESPOT_CLINICIAN_ID = os.environ.get('DOSESPOT_CLINICIAN_ID')
DOSESPOT_CLINIC_ID = os.environ.get('DOSESPOT_CLINIC_ID')
DOSESPOT_CLINIC_KEY = os.environ.get('DOSESPOT_CLINIC_KEY')
DOSESPOT_BASE_URI = os.environ.get('DOSESPOT_BASE_URI')
# DOSESPOT_BASE_SSO_URI = os.path.join(DOSESPOT_BASE_URI, 'LoginSingleSignOn.aspx')
# DOSESPOT_BASE_WEBAPI_URI = os.path.join(DOSESPOT_BASE_URI, 'webapi')
# DOSESPOT_BASE_API_URI = os.path.join(DOSESPOT_BASE_WEBAPI_URI, 'api')
# DOSESPOT_ACCESS_TOKEN_URI = os.path.join(DOSESPOT_BASE_WEBAPI_URI, 'token')
# DOSESPOT_PATIENTS_URI = os.path.join(DOSESPOT_BASE_API_URI, 'patients')
# DOSESPOT_PATIENTS_PHARMACY_URI = os.path.join(
#     DOSESPOT_PATIENTS_URI, '{user_id}/pharmacies/{pharmacy_id}'
# )
# DOSESPOT_NOTIFICATIONS_URI = os.path.join(DOSESPOT_BASE_API_URI, 'notifications')
# DOSESPOT_NOTIFICATIONS_COUNT_URI = os.path.join(DOSESPOT_NOTIFICATIONS_URI, 'counts')
# DOSESPOT_NOTIFICATIONS_ERRORS_URI = os.path.join(DOSESPOT_NOTIFICATIONS_URI, 'errors')
# DOSESPOT_PATIENT_PRESCRIPTIONS_URI = os.path.join(
#     DOSESPOT_PATIENTS_URI,
#     '{user_id}/prescriptions?startDate={start_date}&endDate={end_date}',
# )
# DOSESPOT_STANDALONE_DASHBOARD_PATIENT_URI = os.path.join(
#     DOSESPOT_BASE_URI, 'secure/patientdetail2/patientdetail.aspx?PatientID={user_id}'
# )

# Payment Processors
STRIPE_KEY_PUBLISHABLE = os.environ.get('STRIPE_KEY_PUBLISHABLE')
STRIPE_KEY_SECRET = os.environ.get('STRIPE_KEY_SECRET')
STRIPE_CONNECT_URI = os.environ.get('STRIPE_CONNECT_URI')
# STRIPE_CONNECT_OAUTH_TOKEN_URI = os.path.join(STRIPE_CONNECT_URI, 'oauth/token')
STRIPE_CONNECT_ID = os.environ.get('STRIPE_CONNECT_ID')

BRAINTREE_MERCHANT_ID = os.environ.get('BRAINTREE_MERCHANT_ID')
BRAINTREE_PUBLIC_KEY = os.environ.get('BRAINTREE_PUBLIC_KEY')
BRAINTREE_PRIVATE_KEY = os.environ.get('BRAINTREE_PRIVATE_KEY')

PAYMENT_PROCESSOR = os.environ.get('PAYMENT_PROCESSOR')

TAX_JAR_API_KEY = os.environ.get('TAX_JAR_API_KEY')
TAX_JAR_URI = os.environ.get('TAX_JAR_URI')
# TAX_JAR_TAX_URI = os.path.join(TAX_JAR_URI, 'taxes')


# Email
EMAIL_BACKEND = os.environ.get('EMAIL_BACKEND')
EMAIL_HOST = os.environ.get('EMAIL_HOST')
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')
EMAIL_PORT = os.environ.get('EMAIL_PORT')
EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS')
DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL')
BCC_EMAIL = os.environ.get('BCC_EMAIL')
TO_EMAIL = os.environ.get('TO_EMAIL')
ORDERS_EMAIL = os.environ.get('ORDERS_EMAIL')
ERRORS_EMAIL = os.environ.get('ERRORS_EMAIL')
SUPPORT_LOGS_EMAIL = os.environ.get('SUPPORT_LOGS_EMAIL')

KLAVIYO_PUBLIC_API_TOKEN = os.environ.get('KLAVIYO_PUBLIC_API_TOKEN')
KLAVIYO_PRIVATE_API_TOKEN = os.environ.get('KLAVIYO_PRIVATE_API_TOKEN')

if DEBUG:
    TEST_TO_EMAIL = os.environ.get('TEST_TO_EMAIL')

# Optimizely
OPTIMIZELY_PROJECT_ID = os.environ.get('OPTIMIZELY_PROJECT_ID')

# Facebook
FACEBOOK_APP_ID = os.environ.get('FACEBOOK_APP_ID')
FACEBOOK_PIXEL_ID = os.environ.get('FACEBOOK_PIXEL_ID')
FACEBOOK_APP_SECRET = os.environ.get('FACEBOOK_APP_SECRET')
FACEBOOK_API_VERSION = os.environ.get('FACEBOOK_API_VERSION')
FACEBOOK_CONVERSION_API_KEY = os.environ.get('FACEBOOK_CONVERSION_API_KEY')
FACEBOOK_GRAPH_URI = os.environ.get('FACEBOOK_GRAPH_URI')
# FACEBOOK_GRAPH_URI_GRAPH_ME = os.path.join(
#     FACEBOOK_GRAPH_URI,
#     f'{FACEBOOK_API_VERSION}/me?fields=id,first_name,last_name,email&'
#     + 'access_token={access_token}',
# )

TEST_SMS_NUMBER = os.environ.get('TEST_SMS_NUMBER')

# AWS
AWS_ACCESS_KEY = os.environ.get('AWS_ACCESS_KEY')
AWS_SECRET_KEY = os.environ.get('AWS_SECRET_KEY')
AWS_ARN_DEARBRIGHTLY_PROD_CMK = os.environ.get('AWS_ARN_DEARBRIGHTLY_PROD_CMK')
AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_S3')
AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_KEY_S3')

AWS_STORAGE_BUCKET_NAME = (
    'dearbrightly-emr-visit-photos-prod' if PRODUCTION else 'patient-photos-ehr-stage'
)
S3_USE_SIGV4 = True
AWS_S3_SIGNATURE_VERSION = 's3v4'
AWS_S3_REGION_NAME = 'us-west-2'
AWS_QUERYSTRING_EXPIRE = 30
AWS_DEFAULT_ACL = None
AWS_S3_OBJECT_PARAMETERS = {'CacheControl': 'max-age=86400'}
AWS_PRIVATE_MEDIA_LOCATION = 'media/private'
PRIVATE_FILE_STORAGE = 'dearbrightly.storage_backends.PrivateMediaStorage'

# Google Maps
GOOGLE_PLACES_API_KEY = os.environ.get('GOOGLE_PLACES_API_KEY')

# Shipping
USPS_TRACKING_URL = (
    'https://tools.usps.com/go/TrackConfirmAction_input?origTrackNum={tracking_number}'
)
SHIPPO_API_KEY = os.environ.get('SHIPPO_API_KEY')
SHIPPO_USPS_CARRIER_ACCOUNT = os.environ.get('SHIPPO_USPS_CARRIER_ACCOUNT')

# Segment
SEGMENT_PYTHON_WRITE_KEY = os.environ.get('SEGMENT_PYTHON_WRITE_KEY')

# SWIMS (3PL)
SWIMS_URL = os.environ.get('SWIMS_URL')
SWIMS_CUSTOMER_ID_CA_DIST = os.environ.get('SWIMS_CUSTOMER_ID_CA_DIST')
SWIMS_CUSTOMER_ID_CA = os.environ.get('SWIMS_CUSTOMER_ID_CA')
SWIMS_CUSTOMER_ID_KS = os.environ.get('SWIMS_CUSTOMER_ID_KS')
SWIMS_USERNAME_CA_DIST = os.environ.get('SWIMS_USERNAME_CA_DIST')
SWIMS_USERNAME_CA = os.environ.get('SWIMS_USERNAME_CA')
SWIMS_USERNAME_KS = os.environ.get('SWIMS_USERNAME_KS')
SWIMS_PASSWORD = os.environ.get('SWIMS_PASSWORD')

FIRST_TIME_TRIAL_DISCOUNT = 700
FIRST_TIME_TRIAL_DISCOUNT_CODE = "TWOMONTHTRIAL7"
FREE_SUBSCRIPTION_DISCOUNT_CODE = "FREE_SUBSCRIPTION"

ALLOWED_HOSTS = [
    '0.0.0.0',
    'localhost',
    '127.0.0.1',
    'backend',
    '.dearbrightly.com',
]

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django_filters',
    'whitenoise.runserver_nostatic',
    'django.contrib.staticfiles',
    'rest_framework',
    'authentication',
    'rest_framework_swagger',
    'users',
    'api',
    'orders',
    'products',
    'products_new',
    'djmoney',
    'subscriptions',
    'shipping',
    'emr',
    'emr_new',
    'graphene_django',
    'storages',
    'utils',
    'mail',
    'sharing',
    'sharing_new',
    'sms',
    'payment',
    'payment_new',
    'db_analytics',
    'db_shopify',
    'test_without_migrations',
    'django_extensions',
    'dearbrightly'
]

FIXTURE_DIRS = [
    os.path.join(BASE_DIR, 'fixtures'),
    os.path.join(BASE_DIR, 'fixtures/questionnaires'),
]

GRAPHENE = {'SCHEMA': 'emr.schema.schema', 'SCHEMA_OUTPUT': 'schema/schema.json'}

API_NAME = 'graphql'

if DEBUG is True:
    INSTALLED_APPS += ('corsheaders',)

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'authentication.middleware.RefreshTokenMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
]

if DEBUG is False:
    SECURE_HSTS_SECONDS = 3600
    SECURE_SSL_REDIRECT = True
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

ROOT_URLCONF = 'dearbrightly.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
WSGI_APPLICATION = 'dearbrightly.wsgi.application'

# Rest framework permissions
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': ('rest_framework.permissions.IsAuthenticated',),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
    'DEFAULT_RENDERER_CLASSES': (
        'djangorestframework_camel_case.render.CamelCaseJSONRenderer',
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
        'rest_framework_xml.renderers.XMLRenderer',
    ),
    'DEFAULT_PARSER_CLASSES': (
        'djangorestframework_camel_case.parser.CamelCaseJSONParser',
        'rest_framework.parsers.MultiPartParser',
        'rest_framework_xml.parsers.XMLParser',
    ),
    'DEFAULT_FILTER_BACKENDS': ('django_filters.rest_framework.DjangoFilterBackend',),
}

# JWT settings
JWT_AUTH_COOKIE = 'jwt_auth_token'
JWT_EXPIRATION_DELTA = datetime.timedelta(seconds=3600)
JWT_REFRESH_EXPIRATION_DELTA = datetime.timedelta(seconds=7200)
JWT_AUTH = {
    'JWT_ALLOW_REFRESH': True,
    'JWT_AUTH_COOKIE': JWT_AUTH_COOKIE,
    'JWT_EXPIRATION_DELTA': JWT_EXPIRATION_DELTA,
    'JWT_RESPONSE_PAYLOAD_HANDLER': 'authentication.services.jwt_service.jwt_response_payload_handler',
    'JWT_REFRESH_EXPIRATION_DELTA': JWT_REFRESH_EXPIRATION_DELTA,
}

AUTHENTICATION_BACKENDS = [
    'authentication.backend.SocialOauthAuthenticationBackend',
    'django.contrib.auth.backends.ModelBackend',
]

REST_FRAMEWORK_EXTENSIONS = {'DEFAULT_BULK_OPERATION_HEADER_NAME': None}


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql_psycopg2',
#         'NAME': "dearbrightly",
#         'USER': "postgres",
#         'PASSWORD': "12345",
#         'HOST': "192.168.10.186",
#         'PORT': 5433,
#     }
# }

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': os.environ.get('POSTGRES_DB'),
        'USER': os.environ.get('POSTGRES_USER'),
        'PASSWORD': os.environ.get('POSTGRES_PASSWORD'),
        'HOST': os.environ.get('DB_HOST'),
        'PORT': os.environ.get('DB_PORT'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 8,
        },
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
    {
        'NAME': 'users.validators.password_validators.NumberPasswordValidator',
    },
    {
        'NAME': 'users.validators.password_validators.UppercasePasswordValidator',
    },
    {
        'NAME': 'users.validators.password_validators.LowercasePasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
WHITENOISE_INDEX_FILE = True

STATIC_URL = '/static-files/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static-files')
# STATICFILES_DIRS = [
#     os.path.join(BASE_DIR, 'static'),
# ]

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'ERROR'),
        },
    },
}

# logging for protected health information

ENABLE_PHI_LOGGING = True if not DEBUG else False

# Celery
CELERY_SAVING_PHI_LOGS = os.environ.get('CELERY_SAVING_PHI_LOGS', False)

# Shopify
SHOPIFY_ACCESS_TOKEN = os.environ.get('SHOPIFY_ACCESS_TOKEN')
SHOPIFY_API_KEY = os.environ.get('SHOPIFY_API_KEY')
SHOPIFY_SECRET_KEY = os.environ.get('SHOPIFY_SECRET_KEY')
SHOPIFY_STOREFRONT_PRIVATE_ACCESS_TOKEN = os.environ.get('SHOPIFY_STOREFRONT_PRIVATE_ACCESS_TOKEN')
SHOPIFY_SHOP_URL = os.environ.get('SHOPIFY_SHOP_URL')
SHOPIFY_API_VERSION = os.environ.get('SHOPIFY_API_VERSION')
SHOPIFY_WEBHOOK_KEY = os.environ.get('SHOPIFY_WEBHOOK_KEY')

# Highlight
HIGHLIGHT_ACCOUNT_ID = os.environ.get('HIGHLIGHT_ACCOUNT_ID')

# Recharge
RECHARGE_API_TOKEN = os.environ.get('RECHARGE_API_TOKEN')
RECHARGE_API_URI = os.environ.get('RECHARGE_API_URI')
RECHARGE_API_VERSION = os.environ.get('RECHARGE_API_VERSION')
