# Generated by Django 2.0.5 on 2022-04-05 07:09

from django.db import migrations, models
import logging
from django.db.models import Count, Q

logger = logging.getLogger(__name__)

def remove_duplicate_order_products_order_items(apps, schema_editor):
    Order = apps.get_model("orders", "Order")
    Product = apps.get_model("products", "Product")
    User = apps.get_model("users", "User")
    OrderItem = apps.get_model("orders", "OrderItem")
    OrderProduct = apps.get_model("orders", "OrderProduct")

    duplicated_order_products = (
        OrderProduct.objects.values('product', 'order').annotate(Count('id')).order_by().filter(id__count__gt=1)
    )
    for duplicated_order_product in duplicated_order_products:
        orders = Order.objects.filter(id=duplicated_order_product.get("order"))
        order = orders.first() if orders else None
        products = Product.objects.filter(id=duplicated_order_product.get("product"))
        product = products.first() if products else None
        order_products = OrderProduct.objects.filter(order=order, product=product)

        if order and product:
            customer = User.objects.filter(id=order.customer_id).first()
            order_product = order_products.latest('created_datetime') if order_products else None
            order_items = OrderItem.objects.filter(order_product=order_product)
            order_item = order_items.latest('created_datetime') if order_items else None
            print(
                f"{order.id}, {order.customer_id}, {customer.email}, {order_product.id}, {product.id}, "
                f"{order_item.product.id}, {order.payment_captured_datetime}, {order.refund_amount}, "
                f"{duplicated_order_product.get('id__count')}, {order.notes}")

            if order_item:
                order_item.delete()
            if order_product:
                order_product.delete()


class Migration(migrations.Migration):

    dependencies = [
        ('orders', '0114_order_coupon'),
    ]

    operations = [
        migrations.RunPython(remove_duplicate_order_products_order_items, reverse_code=migrations.RunPython.noop),
    ]
