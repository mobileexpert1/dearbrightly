# Generated by Django 2.0.5 on 2020-01-05 23:57

from django.db import migrations, models
import django.db.models.deletion
from django.db.models import Q
import logging
logger = logging.getLogger(__name__)

# Migrate all user's most recent completed, rx order so that we can display their treatment strength on the user dashboard.
# Leaving migration out for all orders as this will be difficult to accurately determine since there were a lot of manual
# work to create the orders in the past and no consistent way to associate a prescription for a particular order (e.g., timestamps, refills).
# Going forward, we will track the patient's prescription for each order though

def get_latest_trial_prescription(apps, medical_visit):
    prescription = None
    prescriptions = medical_visit.prescriptions.filter(
        (Q(status='eRxSent') | Q(status='Edited'))
        & Q(prescription__refills=0) & Q(prescription__quantity__lte=15))
    if prescriptions and len(prescriptions) > 0:
        prescription = prescriptions.latest('prescribed_datetime')
    logger.debug(f'[get_latest_trial_prescription] Prescription: {prescription}')
    return prescription

def get_latest_refill_prescription(apps, medical_visit):
    prescription = None
    prescriptions = medical_visit.prescriptions.filter(
        (Q(status='eRxSent') | Q(status='Edited'))
        & Q(prescription__refills__gt=0) & Q(prescription__quantity__gt=15))
    if prescriptions and len(prescriptions) > 0:
        prescription = prescriptions.latest('prescribed_datetime')
    logger.debug(f'[get_latest_refill_prescription] Prescription: {prescription}')
    return prescription

def is_refill(apps, order):
    refill_products = order.order_items.filter(is_refill=True)
    return len(refill_products) > 0


def update_users_most_recent_order_patient_prescription(apps, schema_editor):
    User = apps.get_model('users', 'User')

    for user in User.objects.all():
        most_recent_rx_order = None
        rx_orders = user.orders.filter((Q(status=6) | Q(status=4)) & Q(emr_medical_visit__isnull=False))
        if rx_orders and len(rx_orders) > 0:
            most_recent_rx_order = rx_orders.latest('created_datetime')
        if most_recent_rx_order:
            if is_refill(apps, most_recent_rx_order):
                prescription = get_latest_refill_prescription(apps, most_recent_rx_order.emr_medical_visit)
            else:
                prescription = get_latest_trial_prescription(apps, most_recent_rx_order.emr_medical_visit)
            if prescription:
                most_recent_rx_order.patient_prescription = prescription
                logger.debug(f'[update_users_most_recent_order_patient_prescription] '
                             f'most_recent_rx_order: {most_recent_rx_order.id}. Prescription: {prescription}')
                most_recent_rx_order.save(update_fields=['patient_prescription'])
            else:
                logger.error(f'[update_users_most_recent_order_patient_prescription] '
                             f'!!!!!!!!!!!!! No prescription found for [{most_recent_rx_order.customer.email}]: {most_recent_rx_order.id}.')
        else:
            logger.error(f'[update_users_most_recent_order_patient_prescription] '
                         f'!!!!!!!!!!!!! No rx order [{user.email}].')

class Migration(migrations.Migration):

    dependencies = [
        ('orders', '0090_order_patient_prescription'),
    ]

    operations = [
        migrations.RunPython(update_users_most_recent_order_patient_prescription),
    ]
