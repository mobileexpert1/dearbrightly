import { createSelector } from 'reselect';
import { getKeyFromValue } from 'src/common/helpers/getKeyFromValue';
import moment from "moment";

const getOrdersData = state => state.orders;

export const getOrders = state => getOrdersData(state).data;

export const getOrder = state => getOrdersData(state).order;

export const getOrderStatuses = state => getOrdersData(state).statuses;

export const getOrdersErrorMessage = state => getOrdersData(state).errorMessage;

export const isFetchingOrders = state => getOrdersData(state).isFetching;

export const isUpdatingOrder = state => getOrdersData(state).isUpdating;

export const isUpdateOrderSuccess = state => getOrdersData(state).isUpdateSuccess;

export const isDataFetchedSuccessfully = state => getOrdersData(state).fetchedSuccessfully;

export const getOrdersPagination = state => getOrdersData(state).pagination;

export const getSearchFilter = state => getOrdersData(state).searchFilter;

export const getStatusFilterValue = state => getOrdersData(state).statusFilterValue;

const extractId = (_state, id) => id;

export const getOrderById = createSelector(getOrders, extractId, (orders, orderId) =>
  orders.find(order => order.id == orderId),
);

export const getOrdersByCustomerId = createSelector(getOrders, extractId, (orders, customerId) =>
  orders ? orders.filter(order => order.customer.id == customerId) : null,
);

export const getNewestOrderByCustomerId = createSelector(
  getOrdersByCustomerId,
  customerOrders =>
    customerOrders && customerOrders.length
      ? customerOrders.sort((a, b) => new Date(a.date) - new Date(b.date))[0]
      : null,
);

export const getOrderStatusesOptions = createSelector(getOrderStatuses, orderStatuses =>
  Object.values(orderStatuses).map((name, value) => ({
    name,
    value,
  })),
);

export const getSortedOrders = createSelector(getOrders, (orders) =>
  orders.sort(function (a, b) {
    return new Date(b.createdDatetime) - new Date(a.createdDatetime);
  }),
)

export const getSortedActiveSubscriptionOrders = createSelector(getSortedOrders, (sortedOrders) =>
  sortedOrders.filter(order => order.autogenerated == true),
);

export const getMostRecentActiveSubscriptionOrder = createSelector(getSortedActiveSubscriptionOrders, (sortedActiveSubscriptionOrders) =>
  (sortedActiveSubscriptionOrders.length > 0) ? sortedActiveSubscriptionOrders[0] : null
);

export const getOrdersBeingProcessed = createSelector(getOrders, getOrderStatuses, (orders, orderStatuses) =>
  orders.filter(order =>
    order.status == getKeyFromValue(orderStatuses, 'Pending Pharmacy')),
);

export const getSubscriptionOrdersBeingProcessed = createSelector(getOrdersBeingProcessed, (orders) =>
  orders.filter(order =>
    order.isSubscription == true),
);

export const getSortedSubscriptionOrdersBeingProcessed = createSelector(getSubscriptionOrdersBeingProcessed, (subscriptionOrdersBeingProcessed) =>
  subscriptionOrdersBeingProcessed.sort(function (a, b) {
    return new Date(b.createdDatetime) - new Date(a.createdDatetime);
  }),
)

export const getMostRecentSubscriptionOrderBeingProcessed = createSelector(getSortedSubscriptionOrdersBeingProcessed, (sortedOrdersBeingProcessed) =>
  (sortedOrdersBeingProcessed.length > 0) ? sortedOrdersBeingProcessed[0] : null
);

export const getLatestOrder = createSelector(getOrders, (orders) => {
  if (orders && orders.length > 0) {
    orders.sort(function(a,b){return a.createdDatetime - b.createdDatetime});
    return orders[0];
  } else {
    return null;
  }
})

export const getOrdersCreatedWithinLast2Weeks = createSelector(getOrders, (orders) => {
    const recentOrders = orders.filter(order => {
        const now = moment();
        const hoursSinceOrderCreated = now.diff(order.createdDatetime, 'hours');
        return order.paymentCapturedDatetime && hoursSinceOrderCreated <= 336 && hoursSinceOrderCreated >= 0;
    });
    return recentOrders;
})